// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sebasttiano/Blackbird.git/internal/models"
	repository "github.com/sebasttiano/Blackbird.git/internal/repository"
)

// MockMetricService is a mock of MetricService interface.
type MockMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceMockRecorder
}

// MockMetricServiceMockRecorder is the mock recorder for MockMetricService.
type MockMetricServiceMockRecorder struct {
	mock *MockMetricService
}

// NewMockMetricService creates a new mock instance.
func NewMockMetricService(ctrl *gomock.Controller) *MockMetricService {
	mock := &MockMetricService{ctrl: ctrl}
	mock.recorder = &MockMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricService) EXPECT() *MockMetricServiceMockRecorder {
	return m.recorder
}

// GetAllValues mocks base method.
func (m *MockMetricService) GetAllValues(ctx context.Context) *repository.StoreMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValues", ctx)
	ret0, _ := ret[0].(*repository.StoreMetrics)
	return ret0
}

// GetAllValues indicates an expected call of GetAllValues.
func (mr *MockMetricServiceMockRecorder) GetAllValues(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValues", reflect.TypeOf((*MockMetricService)(nil).GetAllValues), ctx)
}

// GetModelValue mocks base method.
func (m *MockMetricService) GetModelValue(ctx context.Context, metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelValue", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetModelValue indicates an expected call of GetModelValue.
func (mr *MockMetricServiceMockRecorder) GetModelValue(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelValue", reflect.TypeOf((*MockMetricService)(nil).GetModelValue), ctx, metric)
}

// GetValue mocks base method.
func (m *MockMetricService) GetValue(ctx context.Context, string, metricType string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, string, metricType)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockMetricServiceMockRecorder) GetValue(ctx, string, metricType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockMetricService)(nil).GetValue), ctx, string, metricType)
}

// Restore mocks base method.
func (m *MockMetricService) Restore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockMetricServiceMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockMetricService)(nil).Restore))
}

// Save mocks base method.
func (m *MockMetricService) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricServiceMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricService)(nil).Save))
}

// SetModelValue mocks base method.
func (m *MockMetricService) SetModelValue(ctx context.Context, metrics []*models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelValue", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelValue indicates an expected call of SetModelValue.
func (mr *MockMetricServiceMockRecorder) SetModelValue(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelValue", reflect.TypeOf((*MockMetricService)(nil).SetModelValue), ctx, metrics)
}

// SetValue mocks base method.
func (m *MockMetricService) SetValue(ctx context.Context, metricName, metricType, metricValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", ctx, metricName, metricType, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue.
func (mr *MockMetricServiceMockRecorder) SetValue(ctx, metricName, metricType, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockMetricService)(nil).SetValue), ctx, metricName, metricType, metricValue)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockRepository) GetAllMetrics(ctx context.Context, s *repository.StoreMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockRepositoryMockRecorder) GetAllMetrics(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockRepository)(nil).GetAllMetrics), ctx, s)
}

// GetCounter mocks base method.
func (m *MockRepository) GetCounter(ctx context.Context, metric *repository.CounterMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockRepositoryMockRecorder) GetCounter(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockRepository)(nil).GetCounter), ctx, metric)
}

// GetGauge mocks base method.
func (m *MockRepository) GetGauge(ctx context.Context, metric *repository.GaugeMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockRepositoryMockRecorder) GetGauge(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockRepository)(nil).GetGauge), ctx, metric)
}

// RestoreAllMetrics mocks base method.
func (m *MockRepository) RestoreAllMetrics(gauges map[string]float64, counters map[string]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreAllMetrics", gauges, counters)
}

// RestoreAllMetrics indicates an expected call of RestoreAllMetrics.
func (mr *MockRepositoryMockRecorder) RestoreAllMetrics(gauges, counters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllMetrics", reflect.TypeOf((*MockRepository)(nil).RestoreAllMetrics), gauges, counters)
}

// SetCounter mocks base method.
func (m *MockRepository) SetCounter(ctx context.Context, metric *repository.CounterMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockRepositoryMockRecorder) SetCounter(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockRepository)(nil).SetCounter), ctx, metric)
}

// SetGauge mocks base method.
func (m *MockRepository) SetGauge(ctx context.Context, metric *repository.GaugeMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockRepositoryMockRecorder) SetGauge(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockRepository)(nil).SetGauge), ctx, metric)
}
